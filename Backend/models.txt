# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountEmailaddress(models.Model):
    email = models.CharField(unique=True, max_length=254)
    verified = models.BooleanField()
    primary = models.BooleanField()
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailaddress'
        unique_together = (('user', 'email'), ('user', 'primary'),)


class AccountEmailconfirmation(models.Model):
    created = models.DateTimeField()
    sent = models.DateTimeField(blank=True, null=True)
    key = models.CharField(unique=True, max_length=64)
    email_address = models.ForeignKey(AccountEmailaddress, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailconfirmation'


class ArtistsArtist(models.Model):
    id = models.BigAutoField(primary_key=True)
    bio = models.TextField()
    photo = models.CharField(max_length=100, blank=True, null=True)
    banner_photo = models.CharField(max_length=100, blank=True, null=True)
    status = models.CharField(max_length=20)
    submitted_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.OneToOneField('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'artists_artist'


class ArtistsArtistGenres(models.Model):
    id = models.BigAutoField(primary_key=True)
    artist = models.ForeignKey(ArtistsArtist, models.DO_NOTHING)
    genre = models.ForeignKey('MusicGenre', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'artists_artist_genres'
        unique_together = (('artist', 'genre'),)


class ArtistsFollow(models.Model):
    id = models.BigAutoField(primary_key=True)
    artist = models.ForeignKey(ArtistsArtist, models.DO_NOTHING)
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'artists_follow'
        unique_together = (('user', 'artist'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthtokenToken(models.Model):
    key = models.CharField(primary_key=True, max_length=40)
    created = models.DateTimeField()
    user = models.OneToOneField('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authtoken_token'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DjangoSite(models.Model):
    domain = models.CharField(unique=True, max_length=100)
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'django_site'


class LibraryLibrary(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.OneToOneField('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'library_library'


class LibraryLibraryAlbums(models.Model):
    id = models.BigAutoField(primary_key=True)
    library = models.ForeignKey(LibraryLibrary, models.DO_NOTHING)
    album = models.ForeignKey('MusicAlbum', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'library_library_albums'
        unique_together = (('library', 'album'),)


class LibraryLibraryPlaylists(models.Model):
    id = models.BigAutoField(primary_key=True)
    library = models.ForeignKey(LibraryLibrary, models.DO_NOTHING)
    playlist = models.ForeignKey('PlaylistPlaylist', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'library_library_playlists'
        unique_together = (('library', 'playlist'),)


class ListeningHistoryPlaycount(models.Model):
    id = models.BigAutoField(primary_key=True)
    count = models.IntegerField()
    last_played = models.DateTimeField()
    music = models.ForeignKey('MusicMusic', models.DO_NOTHING)
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'listening_history_playcount'
        unique_together = (('user', 'music'),)


class ListeningHistoryPlayhistory(models.Model):
    id = models.BigAutoField(primary_key=True)
    played_at = models.DateTimeField()
    music = models.ForeignKey('MusicMusic', models.DO_NOTHING)
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'listening_history_playhistory'


class MusicAlbum(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=200)
    description = models.TextField()
    is_public = models.BooleanField()
    cover_photo = models.CharField(max_length=100)
    banner_img = models.CharField(max_length=100, blank=True, null=True)
    release_date = models.DateTimeField()
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    duration = models.IntegerField()
    artist = models.ForeignKey(ArtistsArtist, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'music_album'


class MusicAlbumtrack(models.Model):
    id = models.BigAutoField(primary_key=True)
    track_number = models.IntegerField()
    album = models.ForeignKey(MusicAlbum, models.DO_NOTHING)
    track = models.ForeignKey('MusicMusic', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'music_albumtrack'
        unique_together = (('album', 'track_number'),)


class MusicEqualizerpreset(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=50)
    is_default = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    band_32 = models.IntegerField()
    band_64 = models.IntegerField()
    band_125 = models.IntegerField()
    band_250 = models.IntegerField()
    band_500 = models.IntegerField()
    band_1k = models.IntegerField()
    band_2k = models.IntegerField()
    band_4k = models.IntegerField()
    band_8k = models.IntegerField()
    band_16k = models.IntegerField()
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'music_equalizerpreset'
        unique_together = (('user', 'name'),)


class MusicGenre(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(unique=True, max_length=50)
    description = models.TextField()

    class Meta:
        managed = False
        db_table = 'music_genre'


class MusicMusic(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=200)
    cover_photo = models.CharField(max_length=100)
    audio_file = models.CharField(max_length=100)
    video_file = models.CharField(max_length=100, blank=True, null=True)
    duration = models.DurationField(blank=True, null=True)
    approval_status = models.CharField(max_length=20)
    release_date = models.DateTimeField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_public = models.BooleanField()
    artist = models.ForeignKey(ArtistsArtist, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'music_music'


class MusicMusicGenres(models.Model):
    id = models.BigAutoField(primary_key=True)
    music = models.ForeignKey(MusicMusic, models.DO_NOTHING)
    genre = models.ForeignKey(MusicGenre, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'music_music_genres'
        unique_together = (('music', 'genre'),)


class PlaylistPlaylist(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=200)
    description = models.TextField()
    is_public = models.BooleanField()
    cover_photo = models.CharField(max_length=100)
    duration = models.IntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    created_by = models.ForeignKey('UsersCustomuser', models.DO_NOTHING, blank=True, null=True)
    is_system_created = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'playlist_playlist'
        unique_together = (('name', 'created_by'),)


class PlaylistPlaylisttrack(models.Model):
    id = models.BigAutoField(primary_key=True)
    track_number = models.IntegerField()
    music = models.ForeignKey(MusicMusic, models.DO_NOTHING)
    playlist = models.ForeignKey(PlaylistPlaylist, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'playlist_playlisttrack'
        unique_together = (('playlist', 'music', 'track_number'),)


class PremiumPremiumplan(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(unique=True, max_length=20)
    price = models.DecimalField(max_digits=6, decimal_places=2)
    max_users = models.IntegerField()
    description = models.TextField()

    class Meta:
        managed = False
        db_table = 'premium_premiumplan'


class PremiumRazorpaytransaction(models.Model):
    id = models.BigAutoField(primary_key=True)
    razorpay_payment_id = models.CharField(max_length=255)
    razorpay_order_id = models.CharField(max_length=255)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=10)
    timestamp = models.DateTimeField()
    status = models.CharField(max_length=20)
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'premium_razorpaytransaction'


class PremiumUsersubscription(models.Model):
    id = models.BigAutoField(primary_key=True)
    razorpay_subscription_id = models.CharField(unique=True, max_length=255, blank=True, null=True)
    status = models.CharField(max_length=20)
    started_at = models.DateTimeField(blank=True, null=True)
    expires_at = models.DateTimeField(blank=True, null=True)
    plan = models.ForeignKey(PremiumPremiumplan, models.DO_NOTHING, blank=True, null=True)
    user = models.OneToOneField('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'premium_usersubscription'


class SocialaccountSocialaccount(models.Model):
    provider = models.CharField(max_length=200)
    uid = models.CharField(max_length=191)
    last_login = models.DateTimeField()
    date_joined = models.DateTimeField()
    extra_data = models.JSONField()
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialaccount'
        unique_together = (('provider', 'uid'),)


class SocialaccountSocialapp(models.Model):
    provider = models.CharField(max_length=30)
    name = models.CharField(max_length=40)
    client_id = models.CharField(max_length=191)
    secret = models.CharField(max_length=191)
    key = models.CharField(max_length=191)
    provider_id = models.CharField(max_length=200)
    settings = models.JSONField()

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp'


class SocialaccountSocialappSites(models.Model):
    id = models.BigAutoField(primary_key=True)
    socialapp = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp_sites'
        unique_together = (('socialapp', 'site'),)


class SocialaccountSocialtoken(models.Model):
    token = models.TextField()
    token_secret = models.TextField()
    expires_at = models.DateTimeField(blank=True, null=True)
    account = models.ForeignKey(SocialaccountSocialaccount, models.DO_NOTHING)
    app = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialtoken'
        unique_together = (('app', 'account'),)


class TokenBlacklistBlacklistedtoken(models.Model):
    id = models.BigAutoField(primary_key=True)
    blacklisted_at = models.DateTimeField()
    token = models.OneToOneField('TokenBlacklistOutstandingtoken', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'token_blacklist_blacklistedtoken'


class TokenBlacklistOutstandingtoken(models.Model):
    id = models.BigAutoField(primary_key=True)
    token = models.TextField()
    created_at = models.DateTimeField(blank=True, null=True)
    expires_at = models.DateTimeField()
    user = models.ForeignKey('UsersCustomuser', models.DO_NOTHING, blank=True, null=True)
    jti = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'token_blacklist_outstandingtoken'


class UsersCustomuser(models.Model):
    id = models.BigAutoField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    email = models.CharField(unique=True, max_length=254)
    username = models.CharField(unique=True, max_length=150)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    profile_photo = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users_customuser'


class UsersCustomuserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    customuser = models.ForeignKey(UsersCustomuser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'users_customuser_groups'
        unique_together = (('customuser', 'group'),)


class UsersCustomuserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    customuser = models.ForeignKey(UsersCustomuser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'users_customuser_user_permissions'
        unique_together = (('customuser', 'permission'),)
