name: CI/CD Pipeline for Backend

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  deploy:
    runs-on: self-hosted
    if: >
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'pull_request' &&
       github.event.pull_request.merged == true &&
       github.event.pull_request.base.ref == 'main')

    steps:
      # 🛠️ Fix permissions before checkout clears the workspace
      - name: Fix permissions for workspace
        run: |
          echo "Fixing permissions for workspace"
          sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/Wave || true

      - uses: actions/checkout@v3

      # 🧹 Stop & remove old Docker containers
      - name: Stop & clean up existing Docker containers
        run: |
          sudo docker-compose -f Backend/docker-compose.yml down --volumes --remove-orphans || true

      # 📁 Set up .env
      - name: Set up .env file from GitHub Secrets
        working-directory: Backend
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "EMAIL_HOST=smtp.gmail.com" >> .env
          echo "EMAIL_PORT=587" >> .env
          echo "EMAIL_USE_TLS=True" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}" >> .env
          echo "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}" >> .env
          echo "RAZOR_KEY_ID=${{ secrets.RAZOR_KEY_ID }}" >> .env
          echo "RAZOR_KEY_SECRET=${{ secrets.RAZOR_KEY_SECRET }}" >> .env
          echo "AGORA_APP_ID=${{ secrets.AGORA_APP_ID }}" >> .env
          echo "AGORA_APP_CERTIFICATE=${{ secrets.AGORA_APP_CERTIFICATE }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env
          echo "USE_S3_MEDIA_STORAGE=${{ secrets.USE_S3_MEDIA_STORAGE }}" >> .env
          echo "MEDIA_URL=${{ secrets.MEDIA_URL }}" >> .env
          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" >> .env
          echo "CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}" >> .env 
          echo "CLOUDFRONT_KEY_PAIR_ID=${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}" >> .env
          echo "CLOUDFRONT_PRIVATE_KEY=${{ secrets.CLOUDFRONT_PRIVATE_KEY }}" >> .env

      - name: Debug - check .env exists
        run: |
          cd Backend
          echo "------ .env content ------"
          cat .env
          echo "--------------------------"
          ls -la .env

      # 🚀 Deploy
      - name: Deploy Backend
        run: |
          cd Backend
          sudo docker-compose up -d --build
          sudo docker exec backend python manage.py migrate
          sudo service nginx restart
          sudo docker image prune -a -f